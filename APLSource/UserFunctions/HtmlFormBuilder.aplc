:Class HtmlFormBuilder   
    :field private HEAD←''
    :field private STYLE←''
    :field private HEADING←''
    :field private BODY←''  
    :field private SCRIPT←''
    :field private divCounter←¯1
    :field private groupCounter←¯1 
    :field private closeDiv←'</div>' 
    :field public isForm←1 ⍝ Default yes      

    ⎕IO←0

    ∇ make
      :Implements constructor 
      :Access public  
    ∇  
    
    ∇ make1 form
      :Implements constructor 
      :Access public  
      isForm←form
    ∇      
    
    ∇ {r}←addStyle style
      :Access public   
      STYLE,←⍕style
      r←0
    ∇  
    
    ∇ {r}←addJavaScript script
      :Access public
      SCRIPT,←⍕script
      r←0
    ∇

    ∇ r←getHTML;tempH;tempB;formStart;formEnd;tempS
      :Access public
      ⍝ We do not overwrite the fields so that we can continue to add to the page after this call  
      tempH←HEAD,'style' wrapTag STYLE
      tempH←'head' wrapTag tempH 
      formStart formEnd ← ⊂''  
      :If isForm
        formStart←'<form method="post" action="cb" id="mainForm">'
        formEnd←'<input type="submit" value="Submit"></form>'
      :EndIf
      tempS← 'script' wrapTag SCRIPT
      tempB←'body' wrapTag (HEADING,formStart,BODY,formEnd,tempS)
      r←'html' wrapTag (tempH,tempB) 
    ∇    
    
    ∇ {r}←addTitle title
      :Access public
      HEAD,←'title' wrapTag ⍕title
      r←0
    ∇
   
    ∇ {r}←{t} addHeading msg;header;h
      :Access public    
      :If msg≢''
        msg←⍕msg
        h←{(2=⎕NC't'):t ⋄ ⍵}'h3'  
        header← h wrapTag msg      
        HEADING←'header' wrapTag header,HEADING
        ⍝ Keep the inputted header at the top   
      :EndIf
      r←0
    ∇   
    
    ∇ {r}←addRadioInput args;s1;s2;s3;labels;values;gname 
      :Access public  
      values labels ← args  
      BODY,←openNewDiv
      gname←createNewGroup  
      s1←'<input type="radio" name="'
      s1,←gname,'" value="'
      s2 s3←'">' '<br>'
      BODY,← s1 s2 s3 link values labels
      BODY,←closeDiv
      r←0
    ∇  

    ∇ {r}←addSelectInput args;w;gname;s1;s2;s3;labels;values   
      :Access public    
      labels←args
      values←⍳≢labels
      BODY,←openNewDiv 
      gname←createNewGroup
      BODY,←'<select autofocus name="',gname
      BODY,←'" form="mainForm">'   
      s1 s2 s3 ←'<option value ="' '">' '</option>'     
      BODY,← s1 s2 s3 link values labels
      BODY,←'</select>'
      BODY,←closeDiv
      r←0
    ∇   
    

    ∇ {r}←addCheckboxInput args;s1;s2;s3;gname;labels;values;w
      :Access public       
      labels←args
      values←⍳≢labels
      BODY,←openNewDiv 
      gname←createNewGroup  
      s1←'<input type ="checkbox" name="',gname,'" value="'
      s2 s3←'">' '<br>'
      BODY,← s1 s2 s3 link values labels
      BODY,←closeDiv
      r←0
    ∇  

    ∇ {r}←type addNotification msg;types;colors
      ⍝ Based off W3's notification examples
      :Access public
      types←'Danger' 'Success' 'Info' 'Warning'
      colors←'#f44336' '#4CAF50' '#2196F3' '#ff9800'
      STYLE,←'body{padding: 20px;'
      STYLE,←'background-color: ',⍕colors[⍸types∊⊂type]
      STYLE,←'; color: white;}'
      BODY,←'<div class ="alert">'
      BODY,←'strong' wrapTag msg
      BODY,←'</div>'
      r←0
    ∇   
    
    ∇ {r}←{label} addProgressBar args;l;start;max
      :Access public 
      start max← args   
      l←{(2=⎕NC'label'):label ⋄ ⍵}''  
      BODY,←l  
      BODY,←'<progress value ="',⍕start
      BODY,←'" max ="',(⍕max),'"></progress>'
      r←0 
    ∇  
     
    ∇ {r}←addTextInput args;s1;gname   
      :Access public  
      gname←createNewGroup  
      s1←'<br><input type="text" name="'
      s1,←gname,'"><br>'
      BODY,←∊{⍵,s1}¨args
      r←0
    ∇ 

    ∇ {r}←addDateInput args;gname;s1
      :Access public
      gname←createNewGroup 
      s1←'<input type="date" name="'  
      s1,←gname,'"><br>' 
      BODY,←∊{⍵,s1}¨args         
      r←0
    ∇       
    
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Private Utility Functions ⍝
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     
    wrapTag←{'<',⍺,'>',⍵,'</',⍺,'>'} 
    
    pair←{↓⍺,[.5],⍵}
     
    ∇ r←openNewDiv
      divCounter+←1
      r←'<div id ="div',(⍕divCounter),'">'
    ∇  
   
    ∇ r←createNewGroup
      groupCounter+←1
      r←'g',⍕groupCounter
    ∇   
    
    catenateAll←{
    ⍝ Use this function with ∇link
    ⍝ ⍺ ←→ s1..s3
    ⍝ ⍵ ←→ 2 item pair of a value and its label
      value label ← ⍕¨⍵ 
      s1 s2 s3 ← ⍺  
      ,/ s1 value s2 label s3
    }
    
    link←{
    ⍝ ⍺ ←→ s1..s3
    ⍝ ⍵ ←→ values labels
    ⍝ ← ←→ catenate this string to BODY      
      values labels ← ⍵ 
      ∊ ⍺∘catenateAll¨ values pair labels
    }                      

:EndClass

